import termiosimport osos.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")from django.core.wsgi import get_wsgi_applicationapplication = get_wsgi_application()from django.db import connectionimport obd# connecting ELMELMconnection = obd.OBD('/dev/pts/2')"""# Check connection statusif connection.status() == OBDStatus.NOT_CONNECTED:    print("ELM is not connected")elif connection.status() == OBDStatus.ELM_CONNECTED:    print("ELM is connected")elif connection.status() == OBDStatus.CAR_CONNECTED:    print("Car is connected")"""def obddb_custom_sql(dataList):    sql = """            INSERT INTO readOBD_obddb (speed,                                       intake_pressure,                                       intake_temp,                                       rpm,                                       maf,                                       coolant_temp,                                       fuel_level,                                       ambiant_air_temp,                                       oil_temp,                                       control_module_voltage)                                VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)          """    with connection.cursor() as cursor:        cursor.execute(sql, (dataList[0], dataList[1], dataList[2], dataList[3], dataList[4], dataList[5], dataList[6], dataList[7], dataList[8], dataList[9]))# Check if a response is emptywhile 1:    try:        dataList = []        speed = ELMconnection.query(obd.commands.SPEED)        if speed.is_null():            dataList.append('None')        elif not speed.is_null():            dataList.append(speed.value.magnitude)        intake_pressure = ELMconnection.query(obd.commands.INTAKE_PRESSURE)        if intake_pressure.is_null():            dataList.append('None')        elif not intake_pressure.is_null():            dataList.append(intake_pressure.value.magnitude)        intake_temp = ELMconnection.query(obd.commands.INTAKE_TEMP)        if intake_temp.is_null():            dataList.append('None')        elif not intake_temp.is_null():            dataList.append(intake_temp.value.magnitude)        rpm = ELMconnection.query(obd.commands.RPM)        if rpm.is_null():            dataList.append('None')        elif not rpm.is_null():            dataList.append(rpm.value.magnitude)        maf = ELMconnection.query(obd.commands.MAF)        if maf.is_null():            dataList.append('None')        elif not maf.is_null():            dataList.append(maf.value.magnitude)        coolant_temp = ELMconnection.query(obd.commands.COOLANT_TEMP)        if coolant_temp.is_null():            dataList.append('None')        elif not coolant_temp.is_null():           dataList.append(coolant_temp.value.magnitude)        fuel_level = ELMconnection.query(obd.commands.FUEL_LEVEL)        if fuel_level.is_null():            dataList.append('None')        elif not fuel_level.is_null():           dataList.append(coolant_temp.value.magnitude)        ambiant_air_temp = ELMconnection.query(obd.commands.AMBIANT_AIR_TEMP)        if ambiant_air_temp.is_null:            dataList.append('None')        elif not ambiant_air_temp.is_null():            dataList.append(ambiant_air_temp.value.magnitude)        oil_temp = ELMconnection.query(obd.commands.OIL_TEMP)        if oil_temp.is_null():            dataList.append('None')        elif not oil_temp.is_null():            dataList.append(oil_temp.value.magnitude)        control_module_voltage = ELMconnection.query(obd.commands.CONTROL_MODULE_VOLTAGE)        if control_module_voltage.is_null():            dataList.append('None')        elif not control_module_voltage.is_null():            dataList.append(control_module_voltage.value.magnitude)        obddb_custom_sql(dataList)    except termios.error:        continue